---
name: Utility Actions

description: |
    A set of utility steps to be used across different workflows, including:
    - Installing Terraform
    - Installing AWS CLI
    - Setting Terraform variables
    - Checking/Creating an S3 bucket


inputs:
    awscli-version:
        description: Version of the AWS CLI to install
        # renovate: datasource=github-releases depName=aws/aws-cli
        default: 2.15.52

    terraform-version:
        description: Version of Terraform to install
        default: latest

    s3-backend-bucket:
        description: Name of the S3 bucket to store Terraform state
        required: true

    s3-bucket-region:
        description: Region of the bucket containing the resources states, if not set, will fallback on aws-region
        required: false

    aws-region:
        description: AWS region to use for S3 bucket operations
        required: true

    tf-state-key:
        description: 'Key use to store the tfstate file (e.g.: /tfstates/terraform.tfstate)'
        required: true

    module-name:
        description: Name of the Terraform module (e.g., eks-cluster, aurora)
        required: true

    tf-cli-config-credentials-hostname:
        description: The hostname of a HCP Terraform/Terraform Enterprise instance to place within the credentials block of the Terraform CLI configuration
            file
        default: app.terraform.io

    tf-cli-config-credentials-token:
        description: The API token for a HCP Terraform/Terraform Enterprise instance to place within the credentials block of the Terraform CLI configuration
            file
        required: false

    tf-terraform-wrapper:
        description: Whether or not to install a wrapper for Terraform CLI
        default: 'true'

outputs:
    terraform-state-url:
        description: URL of the Terraform state file in the S3 bucket
        value: ${{ steps.set-terraform-variables.outputs.terraform-state-url }}
    TFSTATE_BUCKET:
        description: S3 bucket name for Terraform state
        value: ${{ steps.set-terraform-variables.outputs.TFSTATE_BUCKET }}
    TFSTATE_REGION:
        description: Region of the S3 bucket for Terraform state
        value: ${{ steps.set-terraform-variables.outputs.TFSTATE_REGION }}
    TFSTATE_KEY:
        description: Key of the Terraform state file in the S3 bucket
        value: ${{ steps.set-terraform-variables.outputs.TFSTATE_KEY }}

runs:
    using: composite
    steps:
        - name: Install Terraform
          uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd # v3
          with:
              cli_config_credentials_hostname: ${{ inputs.tf-cli-config-credentials-hostname }}
              cli_config_credentials_token: ${{ inputs.tf-cli-config-credentials-token }}
              terraform_version: ${{ inputs.terraform-version }}
              terraform_wrapper: ${{ inputs.tf-terraform-wrapper }}

        - name: Install AWS CLI
          shell: bash
          run: |
              if ! command -v aws &> /dev/null; then
                echo "AWS CLI not found, installing..."
                curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64-${{ inputs.awscli-version }}.zip" -o "awscliv2.zip"
                unzip -qq awscliv2.zip
                sudo ./aws/install
                rm -f awscliv2.zip
              else
                echo "Warning: AWS CLI is already installed."
              fi

        - name: Set Terraform variables
          shell: bash
          id: set-terraform-variables
          run: |
              export TFSTATE_BUCKET="${{ inputs.s3-backend-bucket }}"
              export TFSTATE_KEY="${{ inputs.tf-state-key }}"

              if [ -z "${{ inputs.s3-bucket-region }}" ]; then
                export TFSTATE_REGION="${{ inputs.aws-region }}"
              else
                export TFSTATE_REGION="${{ inputs.s3-bucket-region }}"
              fi

              echo "TFSTATE_BUCKET=${TFSTATE_BUCKET}" >> "$GITHUB_OUTPUT"
              echo "TFSTATE_REGION=${TFSTATE_REGION}" >> "$GITHUB_OUTPUT"
              echo "TFSTATE_KEY=${TFSTATE_KEY}" >> "$GITHUB_OUTPUT"

              terraform_state_url="s3://${TFSTATE_BUCKET}/${TFSTATE_KEY}"
              echo "terraform-state-url=${terraform_state_url}" >> "$GITHUB_OUTPUT"

        - name: Check if S3 bucket exists
          id: create-s3-bucket
          shell: bash
          run: |
              if aws s3api head-bucket --bucket ${{ inputs.s3-backend-bucket }} --region ${{ steps.set-terraform-variables.outputs.TFSTATE_REGION }} 2>/dev/null; then
                echo "Bucket already exists"
              else
                echo "Bucket does not exist, creating..."
                aws s3api create-bucket --bucket ${{ inputs.s3-backend-bucket }} --region ${{ steps.set-terraform-variables.outputs.TFSTATE_REGION }} --create-bucket-configuration LocationConstraint=${{ steps.set-terraform-variables.outputs.TFSTATE_REGION }}
              fi

              aws s3api put-public-access-block --bucket ${{ inputs.s3-backend-bucket }} --region ${{ steps.set-terraform-variables.outputs.TFSTATE_REGION }} --public-access-block-configuration "BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true"
